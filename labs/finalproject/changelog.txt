5/20
intial version
Planning and beginning to assemble bare bones blog system

5/22
Some reorganizing and beginning to write posts to file

5/23
Used Gordon's post writing code. Rewrote it to have smarter formatting
Improved post display by including usernames

5/24
Added a post ID system as well as beginning to implement commenting

5/25
Beginning to read in files

5/26
Rewrote entire project to use objects. Much cleaner and comment system working.
Log out buttons implemented

5/27
Started implementing the up/downvote system. 
Major bugs came about in regard to the writing of the post objects.
After 3 hours, I resolved it. It was due to me confusing types of the
variables (I wish there was explicit typing!).
Buttons have been reworked into links so more than one variable can be 
passed into the url (Gordon's idea).

5/28
Another project rewrite. This happens to be the drawbacks of not
planning from the beginning. I rewrote the stdStuff classes to
use inheritance (potentially useful in the future). The code has been 
refactored so most of the classes now have instance methods (such as
display). The rest of the pages have been rewritten to make use of the new
functions. The main reason for the second rewrite is to make the
implementation of friends simpler. The User class now has an array to store 
posts.

5/30
Another minor code rewrite by me, this time making the objFileToList
function (in stdStuff) to allow for creation of dictionaries with 
usernames as keys. I mainly did this to lessen code size due to needing to
constantly search all users for the current user.
I finally started work on inboxes. Another page has been made for it. So far,
users can send messages to other users with a title and message. Maybe we'll
support replying later. The sending function handles users that don't exist.
In addition, I implemented the ability to mark posts as read or as unread,
allowing the user to see one or the other as they wish.
I also made for all TextContainers to be sorted by id, so newer things show
up first.

5/31
In class, I merged code with Gordon, using his post search engine. I started
work on the friend system. I managed to make a function that, given a search
string, can look through the dictionary of users to see if they are there.

6/01
I worked a bit on the friend requesting system. I made a new FriendRequest
class that inherits from message. I did this so I could implement methods
such as acceptRequest and declineRequest. This distinction also allows for
the inbox to display the two differently. As of now, the request gets
directly sent to the same area of the inbox. I would like to change it so
there is a seperate area in the inbox for requests.

6/02
I merged code with Gordon, taking the code he wrote to limit the amount of
up/downvotes a user can perform to one (only for posts so far). In turn, I 
gave him the code I started for the friend requests. Speaking of which, 
I continued work on the system, deciding ultimately to include the 
requests in the same area of the inbox, but above all other messages. Taking
advantage of inheritance, I was able to add different links below friend 
requests (accept and decline) while being able to maintain the same overall
message structure that is seen in Message objects. Finally, I fixed up post
viewing so that now one can see posts from all there friends as well.

6/03
We have practically implemented all the features we originally wanted, so we
were discussing what else to add. I wroked on the ability to reply to messages
while Gordon worked on making groups. I did not get very far on the message
reply system.

6/05
I worked again on the reply system. I planned out how the layout should look,
but when actually working on it, I did not get very far. It is unable to
update both users inboxes.

6/06
I attempted to fix the reply messaging system in class. I managed to get the
userTag to switch during replies, but now I need to get it to only switch
when a different user is replying. I was unable to work on the project at
home.

6/07
Regrettably, I arrived home late last night, so I was unable to get to my
project, leading to it not working in class. My section was still broken when
Gordon merged it (I guess I'm the one to blame).
I fixed the problem in stdStuff; it was just an unmatched paren. I spent
the next 2 hours working on just the reply system. It worked, but the
recipient and origin tags did not change accordingly. It eventually turned out
to be a simple fix: just take the currentUser, then use an if statement from
there.

6/09
I managed to get the displaying of replies in a message chain to display,
as well as being able to reply when in the messageChain file. I began merging
with gordon. However, I think that I will have to rewrite some of his code in
order for it to be compatible with my project. I am short on time today, so
I will attempt to do it tomorrow.

6/10
One of the major problems with the group code that Gordon made was the loss
of the ability to vote. This was my primary focus today. After merging some
minor stuff, I started work on getting the voting system on all the pages
working again.
This turned out to be simpler than I thought. Gordon made variables that
allowed for me to rewrite the vote handling system only once. This was due
to the huge similarity in the group object compared to the user object.
In hindsight, we probably should've factored out those common features (such
as the posts field) into a higher level container class to inherit from. I
managed to drastically cut the code size on all the group related files.
Another thing we overlooked was handling angle brackets in forms. This was
easily handled with a function that I called on every instance data could
be entered into a textfield.
None of this probably makes sense right now. I was really into it today,
starting coding at 4 and going up until now (about 1am). Even though its
not technically the last day, I still feel bad about waiting this long
to deal with this problem.
On the bright side...CSS!!!1!1!1!11!1
